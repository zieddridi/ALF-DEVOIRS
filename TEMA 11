+// Input to this machine: two binary numbers
+// Output: the difference
+var addOneMachine = {};
+addOneMachine.stateTransition = {
+    "zero": { //finds right edge of first number
+        "0": ["0", "right", "zero"],
+        "1" : ["1", "right", "zero"],
+        "": ["", "right", "one"]
+    },
+     "one": { //finds right edge of second number
+        "0": ["0", "right", "one"],
+        "1" : ["1", "right", "one"],
+        "": ["", "left", "two"]
+    },
+     "two": { //if a 0 keep looking for a 1
+     //removed rightmost 1from right number
+     //if we find a blank before 1, erase zeros
+        "0": ["0", "left", "two"],
+        "1" : ["0", "left", "three"],
+        "": ["", "right", "five"]
+    },
+     "three": { //move to left number
+        "0": ["0", "left", "three"],
+        "1" : ["1", "left", "three"],
+        "": ["", "left", "eight"]
+    },
+     "four": { //finds right edge of first number
+        "0": ["0", "right", "four"],
+        "1" : ["1", "right", "four"],
+        "": ["", "right", "five"]
+    }, 
+    "five": { //finds right edge of second number
+        "0": ["0", "right", "five"],
+        "1" : ["1", "right", "five"],
+        "": ["", "left", "six"]
+    },
+    "six": {//removes 0 from right number
+        "0": ["", "left", "six"],
+        "1": ["1", "left", "six"],
+        "": ["", "left", "seven"]
+    },
+    "seven": {//removes 0 from left number
+        "0": ["", "left", "seven"],
+        "1": ["1", "left", "seven"],
+        "": ["", "right", "nine"]
+    },
+    "eight": {//move left looking for a 1 to change to a 0
+    //if a 1 is found, change to 0, loop again
+    //if blank then all done, then erase zeros
+        "0": ["0", "left", "eight"],
+        "1": ["0", "right", "zero"],
+        "": ["", "right", "four"]
+    },
+    "nine": {//stop it! 
+        "0": ["0", "left", "stop"],
+        "1": ["1", "left", "stop"],
+        "": ["0", "left", "stop"]    
+    },
+    "stop": {}  
+};
+
+addOneMachine.alphabet = ["0", "1", ""];
+addOneMachine.startTape = "111 111";
+// Variables representing the Turing Machine before it runs
+/////////////////////////////////////////////////////////////
+// Be careful when changing anything below this line!
+addOneMachine.position = 0;
+addOneMachine.state = "zero";
+addOneMachine.negArr = [];
+addOneMachine.posArr = [];
+// Variables controlling the graphics of the turing machine
+addOneMachine.boxWidth = 25;
+addOneMachine.boxHeight = 30;
+addOneMachine.startHeight = 0;
+addOneMachine.numberHeight = addOneMachine.startHeight + 50;
+addOneMachine.center = 0;
+/**
+ * Returns true if the given character is in the given
+ * Turing Machine's alphabet and false otherwise.
+ */
+var isValidChar = function(c, turingMachine){
+    for(var l in turingMachine.alphabet){
+        if (turingMachine.alphabet[l] === str(c)){
+            return true;
+        }
+    }
+    return false;
+};
+
+/**
+ * Given a string representing the desired tape state,
+ * and a Turing Machine, set the Turing Machine's tape
+ * to the state represented in the string.
+ */
+var setTape = function(tape, turingMachine){
+    turingMachine.negArr = [];
+    turingMachine.posArr = [];
+    var i = 0;
+    for (var c in tape){
+        if (isValidChar(tape[c], turingMachine)){
+            turingMachine.posArr[i] = tape[c];
+        } else{
+            turingMachine.posArr[i] = "";
+        }
+        i += 1;
+    }
+    return turingMachine;
+};
+
+/**
+ * Draw the given number to the screen at the given point.
+ * If the numbers are too long, shift every other one down
+ * to make it easier to read.
+ */
+var drawNum = function(num, x, y) {
+    fill(0, 0, 0);  // Black text
+    textSize(12);
+    // Move numbers down if they'd collide with other numbers
+    if (str(num).length >= 3 && num % 2 !== 0) {
+        text(num, x, y + 10);
+    } else {
+        text(num, x, y);
+    }
+};
+
+/**
+ * Draw a helpful number line to label the tape boxes,
+ * given an offset from zero and a Turing Machine
+ */
+var numberLine = function(offset, turingMachine) {
+    var y = turingMachine.numberHeight;
+    // The x pixel of the first number at least 0
+    var x = width/2 + (offset * turingMachine.boxWidth);
+    var i = 0;
+    while (x < width){
+        drawNum(i, x + 8, y);
+        x += turingMachine.boxWidth;
+        i += 1;
+    }
+    
+    x = width/2 + ((offset - 1) * turingMachine.boxWidth);
+    i = -1;
+    while (x > 0 - turingMachine.boxWidth) {
+        drawNum(i, x + 3 , y);
+        x -= turingMachine.boxWidth;
+        i -= 1;
+    }
+};
+
+/**
+ * Draw a single box on the TM tape,
+ * at position (x, turingMachine.startHeight)
+ * with contents given by contents, on the turing machine 
+ * given by turingMachine.
+ * If highlight is true, make the box background yellow.
+ */
+var drawBox = function(x, contents, turingMachine, highlight){
+     // Should we highlight the box?
+     if (highlight){
+         fill(255, 255, 0);
+     } else{
+          fill(255, 255, 255);
+     }
+     // Draw the box itself.
+     rect(x,
+        turingMachine.startHeight,
+        turingMachine.boxWidth,
+        turingMachine.boxHeight);
+     // Draw the box's contents.
+     fill(0, 0, 0);
+     textSize(18);
+     text(contents, x + 8, turingMachine.startHeight + 21);
+};
+
+/**
+ * Given a turing machine, draw its tape.
+ * center is the number that's in
+ * the middle of the screen
+ */
+var drawTape = function(turingMachine, newCenter) {
+    background(255, 255, 255); // clear screen
+
+    // makes the code easier to read
+    var boxWidth = turingMachine.boxWidth;
+    var startHeight = turingMachine.startHeight;
+    var numberHeight = turingMachine.numberHeight;
+    
+    // Only move tape if we're a few away from the center
+    var center = turingMachine.center;
+    if (abs(newCenter - turingMachine.center) > 5){
+        center = newCenter;
+        turingMachine.center = newCenter;
+    }
+    
+    // Divider between tape and the state table
+    if (center <= -3 || center >= 94){
+        line(0, numberHeight + 15, 400, numberHeight + 15); 
+    } else{
+        line(0, numberHeight + 5, 400, numberHeight +  5);
+    }
+    
+    // If we want the center to be -3, we should move
+    // the tape 3 to the right.
+    var offset = -center;
+    // the pixel location of box 0.
+    var zeroPosition = width/2 + (offset * boxWidth);
+    for (var i = 0; i < turingMachine.posArr.length; i += 1){
+        drawBox(
+            zeroPosition + (i * boxWidth),
+            turingMachine.posArr[i],
+            turingMachine,
+            i === turingMachine.position);
+    }
+    
+    // Draw in extra boxes to the far right of the screen
+    // to make it look like the tape is infinite
+    while (i * boxWidth < width - zeroPosition){
+        drawBox(
+            zeroPosition + (i * boxWidth),
+            "",
+            turingMachine,
+            i === turingMachine.position);
+        i += 1;
+    }
+    
+    // Draw the left part of the tape.
+    for (var j = 0; j < turingMachine.negArr.length; j += 1) {
+        drawBox(
+            zeroPosition - ((j + 1) * boxWidth),
+            turingMachine.negArr[j],
+            turingMachine,
+            j + 1 === -turingMachine.position);   
+    }
+    // fill in with empty boxes until the far
+    // left of the screen.
+    while ((j - 1) * boxWidth < zeroPosition) {
+        drawBox(
+            zeroPosition - ((j + 1) * boxWidth),
+            "",
+            turingMachine,
+            j + 1 === -turingMachine.position);
+        j += 1; 
+    }
+    // Draw the number line.
+    numberLine(offset, turingMachine);
+};
+
+/**
+ * Given a Turing Machine and a direction to move,
+ * move one space in that direction.
+ */
+var move = function(turingMachine, direction){
+    if (direction === "right") {
+        turingMachine.position += 1;
+    } else if (direction === "left") {
+        turingMachine.position -= 1;
+    }
+    return turingMachine;
+};
+
+/**
+ * Given a Turing Machine, get the value for the tape
+ * at the position the Turing Machine is currently on.
+ */
+var getTapeValue = function(turingMachine){
+    var pos = turingMachine.position;
+    if (pos >= 0){
+        if (turingMachine.posArr[pos] === undefined){
+            // Spaces we don't know about are blank.
+            return "";
+        }
+        return turingMachine.posArr[pos];
+    } else{
+        if (turingMachine.negArr[(-pos) - 1] === undefined){
+            // Spaces we don't know about are blank.
+            return "";   
+        }
+        return turingMachine.negArr[(-pos) - 1];
+    }
+};
+
+/**
+ * Write the given value to the Turing Machine's tape
+ * at the current position.
+ */
+var setTapeValue = function(turingMachine, val){
+    if (!isValidChar(val, turingMachine)){
+        debug("Tried to set invalid character " + val + "!");
+        // If this character isn't valid,
+        // just set a blank character
+        val = "";
+    }
+    var pos = turingMachine.position;
+    if (pos >= 0){
+        turingMachine.posArr[pos] = val;
+    } else{
+        turingMachine.negArr[(-pos) - 1] = val;
+    }
+    return turingMachine;
+};
+
+/**
+ * Given a Turing Machine, run the next step in its execution.
+ */
+var nextStep = function(turingMachine){
+    var tapeValue = getTapeValue(turingMachine);
+    var state = turingMachine.state;
+    var next = turingMachine.stateTransition[state][tapeValue];
+    turingMachine = setTapeValue(turingMachine, next[0]);
+
+    turingMachine = move(turingMachine, next[1]);
+    drawTape(turingMachine, turingMachine.position);
+    turingMachine.state = next[2];
+    return turingMachine;
+};
+
+/**
+ * Draw the table of states, and highlight the current one
+ * in red.
+ */
+var table = function(){
+    fill(0, 0, 0);  // Black text
+    // Write the table headers
+    text("State:", 10, 100);
+    text("Symbol:", 60, 100);
+    text("Write:", 160, 100);
+    text("Direction:", 210, 100);
+    text("Next state:", 290, 100);
+    // Line to separate the headers from the contents
+    line(0, 105, width, 105);
+    // The starting height of text for contents of the table
+    var yText = 120;
+    // Draw a line to separate the current state with the
+    // action we should take
+    line(130, 90, 130, 400);
+    
+    for(var s in addOneMachine.stateTransition) {
+        var next = addOneMachine.stateTransition[s];
+        if (s !== "stop") {
+            for (var c in addOneMachine.alphabet){
+                var char = addOneMachine.alphabet[c];
+                if (addOneMachine.state === s &&
+                        char === getTapeValue(addOneMachine,
+                                addOneMachine.position)){
+                    fill(255, 0, 0);
+                }
+                text(s, 10, yText); // State
+                text(char, 60 + 15, yText); // Number
+        
+                var moves = next[char];
+                text(moves[0], 160 + 15, yText); // Write
+                text(moves[1], 210, yText); // Direction
+                text(moves[2], 290, yText); // Next state  
+            
+                fill(0, 0, 0);
+                yText += 20;
+            }
+        } else{
+            if (addOneMachine.state === s){
+                fill(255, 0, 0);
+            }
+            text(s, 10, yText); // State
+            yText += 20;
+        }
+    }
+};
+
+var mousePressed = function() {
+    if (addOneMachine.state !== "stop"){
+        addOneMachine = nextStep(addOneMachine);
+    } else{
+        drawTape(addOneMachine, 0);
+    }
+    table();
+};
+
+addOneMachine = setTape(addOneMachine.startTape, addOneMachine);
+drawTape(addOneMachine, 0);
+textSize(20);
+fill(0, 0, 0);
+text("Click to run! (one click per step)", 50, 75);
+textSize(12);
+table()
